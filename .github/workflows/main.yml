# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      checks: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    - name: Run Tests and Generate Reports
      run: |
        ./gradlew test --continue
        ./gradlew jacocoTestReport

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.run_id }}
        path: |
          build/reports/tests/test/
          build/test-results/test/
        retention-days: 30

    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports-${{ github.run_id }}
        path: |
          build/reports/jacoco/test/
        retention-days: 30

    - name: Publish Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Gradle Tests
        path: build/test-results/test/*.xml
        reporter: java-junit
        fail-on-error: true

    - name: Add Coverage PR Comment
      uses: madrapps/jacoco-report@v1.6.1
      if: github.event_name == 'pull_request'
      with:
        paths: |
          ${{ github.workspace }}/build/reports/jacoco/test/jacocoTestReport.xml
        token: ${{ secrets.GITHUB_TOKEN }}
        min-coverage-overall: 80
        min-coverage-changed-files: 80
        title: 'Code Coverage Report'
        update-comment: true

    - name: Generate Coverage Summary
      if: always()
      shell: bash
      run: |
        set -euo pipefail

        echo "## 📊 Code Coverage Report" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"

        # 모든 jacocoTestReport.xml 탐색 (단일/멀티모듈 대응)
        mapfile -t REPORTS < <(find . -path "*/build/reports/jacoco/test/jacocoTestReport.xml" -type f | sort)

        if [ ${#REPORTS[@]} -eq 0 ]; then
          echo "❌ No jacocoTestReport.xml found" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "📁 [Open run page](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> "$GITHUB_STEP_SUMMARY"
          exit 0
        fi

        echo "✅ Jacoco report(s) found:" >> "$GITHUB_STEP_SUMMARY"
        for r in "${REPORTS[@]}"; do
          echo "- $r" >> "$GITHUB_STEP_SUMMARY"
        done
        echo "" >> "$GITHUB_STEP_SUMMARY"

        # REPORTS 목록을 stdin으로 파이썬에 전달해 안전 파싱/집계
        printf '%s\n' "${REPORTS[@]}" | python3 - <<'PY' | tee -a "$GITHUB_STEP_SUMMARY" >/dev/null
import sys, pathlib, xml.etree.ElementTree as ET

reports = [line.strip() for line in sys.stdin if line.strip()]
total_line_missed = total_line_covered = 0
total_branch_missed = total_branch_covered = 0

for p in reports:
    path = pathlib.Path(p)
    if not path.exists():
        continue
    try:
        tree = ET.parse(path)
        root = tree.getroot()
        # 우선 report 바로 아래의 counter를 사용, 없으면 하위 전체 합산
        counters = root.findall("./counter") or root.findall(".//counter")
        for c in counters:
            t = c.attrib.get("type")
            missed = int(c.attrib.get("missed", "0"))
            covered = int(c.attrib.get("covered", "0"))
            if t == "LINE":
                total_line_missed += missed
                total_line_covered += covered
            elif t == "BRANCH":
                total_branch_missed += missed
                total_branch_covered += covered
    except Exception:
        # 개별 파일 파싱 실패는 무시하고 계속 진행
        pass

def pct(covered, missed):
    tot = covered + missed
    return (covered / tot * 100.0) if tot > 0 else None

line_pct = pct(total_line_covered, total_line_missed)
branch_pct = pct(total_branch_covered, total_branch_missed)

def fmt(x):
    return f"{x:.2f}%" if x is not None else "N/A"

print("| Metric | Coverage | Covered / Total |")
print("|--------|:--------:|:---------------:|")
print(f"| 📄 Lines | **{fmt(line_pct)}** | `{total_line_covered} / {total_line_covered + total_line_missed}` |")
if branch_pct is None:
    print("| 🌿 Branches | **N/A** | `0 / 0` |")
else:
    print(f"| 🌿 Branches | **{fmt(branch_pct)}** | `{total_branch_covered} / {total_branch_covered + total_branch_missed}` |")
PY

        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo "📁 [Open run page](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> "$GITHUB_STEP_SUMMARY"
   
    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
