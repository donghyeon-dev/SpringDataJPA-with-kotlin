# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      checks: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    - name: Run Tests and Generate Reports
      run: |
        ./gradlew test --continue
        ./gradlew jacocoTestReport

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.run_id }}
        path: |
          build/reports/tests/test/
          build/test-results/test/
        retention-days: 30

    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports-${{ github.run_id }}
        path: |
          build/reports/jacoco/test/
        retention-days: 30

    - name: Publish Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Gradle Tests
        path: build/test-results/test/*.xml
        reporter: java-junit
        fail-on-error: true

    - name: Add Coverage PR Comment
      uses: madrapps/jacoco-report@v1.6.1
      if: github.event_name == 'pull_request'
      with:
        paths: |
          ${{ github.workspace }}/build/reports/jacoco/test/jacocoTestReport.xml
        token: ${{ secrets.GITHUB_TOKEN }}
        min-coverage-overall: 80
        min-coverage-changed-files: 80
        title: 'Code Coverage Report'
        update-comment: true

    - name: Generate Coverage Summary
      if: always()
      run: |
        echo "## 📊 Code Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "build/reports/jacoco/test/jacocoTestReport.xml" ]; then
          echo "✅ Jacoco report found" >> $GITHUB_STEP_SUMMARY
          
          # Debug: Show first few lines of XML to understand structure
          echo "🔍 XML structure:" >> $GITHUB_STEP_SUMMARY
          head -20 build/reports/jacoco/test/jacocoTestReport.xml >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Try xmllint first
          LINE_MISSED=$(xmllint --xpath 'string(//report/counter[@type="LINE"]/@missed)' build/reports/jacoco/test/jacocoTestReport.xml 2>/dev/null || echo "")
          LINE_COVERED=$(xmllint --xpath 'string(//report/counter[@type="LINE"]/@covered)' build/reports/jacoco/test/jacocoTestReport.xml 2>/dev/null || echo "")
          
          echo "🔍 xmllint results:" >> $GITHUB_STEP_SUMMARY
          echo "LINE_MISSED='$LINE_MISSED'" >> $GITHUB_STEP_SUMMARY  
          echo "LINE_COVERED='$LINE_COVERED'" >> $GITHUB_STEP_SUMMARY
          
          # Fallback to grep method
          if [ -z "$LINE_COVERED" ] || [ "$LINE_COVERED" = "0" ]; then
            echo "🔄 Using grep fallback method" >> $GITHUB_STEP_SUMMARY
            
            # Find counter elements directly under report
            LINE_DATA=$(grep -A 5 '<report' build/reports/jacoco/test/jacocoTestReport.xml | grep 'counter.*type="LINE"')
            BRANCH_DATA=$(grep -A 5 '<report' build/reports/jacoco/test/jacocoTestReport.xml | grep 'counter.*type="BRANCH"')
            
            echo "🔍 Raw LINE_DATA: $LINE_DATA" >> $GITHUB_STEP_SUMMARY
            echo "🔍 Raw BRANCH_DATA: $BRANCH_DATA" >> $GITHUB_STEP_SUMMARY
            
            LINE_MISSED=$(echo "$LINE_DATA" | grep -o 'missed="[0-9]*"' | head -1 | grep -o '[0-9]*')
            LINE_COVERED=$(echo "$LINE_DATA" | grep -o 'covered="[0-9]*"' | head -1 | grep -o '[0-9]*')
            
            BRANCH_MISSED=$(echo "$BRANCH_DATA" | grep -o 'missed="[0-9]*"' | head -1 | grep -o '[0-9]*')
            BRANCH_COVERED=$(echo "$BRANCH_DATA" | grep -o 'covered="[0-9]*"' | head -1 | grep -o '[0-9]*')
          else
            BRANCH_MISSED=$(xmllint --xpath 'string(//report/counter[@type="BRANCH"]/@missed)' build/reports/jacoco/test/jacocoTestReport.xml 2>/dev/null || echo "0")
            BRANCH_COVERED=$(xmllint --xpath 'string(//report/counter[@type="BRANCH"]/@covered)' build/reports/jacoco/test/jacocoTestReport.xml 2>/dev/null || echo "0")
          fi
          
          # Clean variables (remove any non-numeric characters)
          LINE_MISSED=$(echo "$LINE_MISSED" | tr -d -c '0-9')
          LINE_COVERED=$(echo "$LINE_COVERED" | tr -d -c '0-9')
          BRANCH_MISSED=$(echo "$BRANCH_MISSED" | tr -d -c '0-9')
          BRANCH_COVERED=$(echo "$BRANCH_COVERED" | tr -d -c '0-9')
          
          # Set defaults for empty values
          LINE_MISSED=${LINE_MISSED:-0}
          LINE_COVERED=${LINE_COVERED:-0}
          BRANCH_MISSED=${BRANCH_MISSED:-0}
          BRANCH_COVERED=${BRANCH_COVERED:-0}
          
          echo "🔍 Final values:" >> $GITHUB_STEP_SUMMARY
          echo "LINE_MISSED=$LINE_MISSED, LINE_COVERED=$LINE_COVERED" >> $GITHUB_STEP_SUMMARY
          echo "BRANCH_MISSED=$BRANCH_MISSED, BRANCH_COVERED=$BRANCH_COVERED" >> $GITHUB_STEP_SUMMARY
          
          # Calculate totals safely
          TOTAL_LINES=$((LINE_COVERED + LINE_MISSED))
          TOTAL_BRANCHES=$((BRANCH_COVERED + BRANCH_MISSED))
          
          echo "🔍 Totals: TOTAL_LINES=$TOTAL_LINES, TOTAL_BRANCHES=$TOTAL_BRANCHES" >> $GITHUB_STEP_SUMMARY
          
          # Calculate percentages
          if [ "$TOTAL_LINES" -gt 0 ]; then
            LINE_COVERAGE=$(awk "BEGIN {printf \"%.1f\", ($LINE_COVERED/$TOTAL_LINES)*100}")
          else
            LINE_COVERAGE="0.0"
          fi
          
          if [ "$TOTAL_BRANCHES" -gt 0 ]; then
            BRANCH_COVERAGE=$(awk "BEGIN {printf \"%.1f\", ($BRANCH_COVERED/$TOTAL_BRANCHES)*100}")
          else
            BRANCH_COVERAGE="N/A"
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Coverage | Covered | Total |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|----------|---------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 📄 Lines | ${LINE_COVERAGE}% | ${LINE_COVERED} | ${TOTAL_LINES} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🌿 Branches | ${BRANCH_COVERAGE}% | ${BRANCH_COVERED} | ${TOTAL_BRANCHES} |" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Jacoco report not found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📁 [Download Coverage Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
