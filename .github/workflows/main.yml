name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      checks: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      - name: Run Tests and Generate Reports
        run: |
          ./gradlew test --continue
          ./gradlew jacocoTestReport

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_id }}
          path: |
            build/reports/tests/test/
            build/test-results/test/
          retention-days: 30

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports-${{ github.run_id }}
          path: |
            build/reports/jacoco/test/
          retention-days: 30

      - name: Publish Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Gradle Tests
          path: build/test-results/test/*.xml
          reporter: java-junit
          fail-on-error: true

      - name: Add Coverage PR Comment
        uses: madrapps/jacoco-report@v1.6.1
        if: github.event_name == 'pull_request'
        with:
          paths: |
            ${{ github.workspace }}/build/reports/jacoco/test/jacocoTestReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 80
          min-coverage-changed-files: 80
          title: 'Code Coverage Report'
          update-comment: true

      - name: Generate Coverage Summary
        if: always()
        shell: bash
        run: |
          set -euo pipefail

          echo "## 📊 Code Coverage Report" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          # 모든 jacocoTestReport.xml 탐색 (단일/멀티모듈 대응)
          mapfile -t REPORTS < <(find . -path "*/build/reports/jacoco/test/jacocoTestReport.xml" -type f | sort)

          if [ ${#REPORTS[@]} -eq 0 ]; then
            echo "❌ No jacocoTestReport.xml found" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "📁 [Open run page](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi

          echo "✅ Jacoco report(s) found:" >> "$GITHUB_STEP_SUMMARY"
          for r in "${REPORTS[@]}"; do
            echo "- $r" >> "$GITHUB_STEP_SUMMARY"
          done
          echo "" >> "$GITHUB_STEP_SUMMARY"

          # 간단하고 확실한 방법으로 XML에서 직접 추출
          JACOCO_XML="build/reports/jacoco/test/jacocoTestReport.xml"
          
          if [ -f "$JACOCO_XML" ]; then
            # XML 파일의 마지막 부분에서 프로젝트 전체 통계 추출 (가장 마지막 counter들)
            LINE_STATS=$(grep -o '<counter type="LINE"[^>]*>' "$JACOCO_XML" | tail -1)
            BRANCH_STATS=$(grep -o '<counter type="BRANCH"[^>]*>' "$JACOCO_XML" | tail -1)
            
            echo "**Debug: Raw XML counters**" >> "$GITHUB_STEP_SUMMARY"
            echo "- LINE_STATS: $LINE_STATS" >> "$GITHUB_STEP_SUMMARY"  
            echo "- BRANCH_STATS: $BRANCH_STATS" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            
            # LINE 통계 추출
            LINE_MISSED=$(echo "$LINE_STATS" | sed -n 's/.*missed="\([0-9]*\)".*/\1/p')
            LINE_COVERED=$(echo "$LINE_STATS" | sed -n 's/.*covered="\([0-9]*\)".*/\1/p')
            
            # BRANCH 통계 추출  
            BRANCH_MISSED=$(echo "$BRANCH_STATS" | sed -n 's/.*missed="\([0-9]*\)".*/\1/p')
            BRANCH_COVERED=$(echo "$BRANCH_STATS" | sed -n 's/.*covered="\([0-9]*\)".*/\1/p')
            
            # 기본값 설정
            LINE_MISSED=${LINE_MISSED:-0}
            LINE_COVERED=${LINE_COVERED:-0}
            BRANCH_MISSED=${BRANCH_MISSED:-0}
            BRANCH_COVERED=${BRANCH_COVERED:-0}
            
            echo "**Debug: Extracted values**" >> "$GITHUB_STEP_SUMMARY"
            echo "- LINE_MISSED=$LINE_MISSED, LINE_COVERED=$LINE_COVERED" >> "$GITHUB_STEP_SUMMARY"
            echo "- BRANCH_MISSED=$BRANCH_MISSED, BRANCH_COVERED=$BRANCH_COVERED" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            
            # 계산
            TOTAL_LINES=$((LINE_COVERED + LINE_MISSED))
            TOTAL_BRANCHES=$((BRANCH_COVERED + BRANCH_MISSED))
            
            if [ "$TOTAL_LINES" -gt 0 ]; then
              LINE_PCT=$(awk "BEGIN {printf \"%.2f\", ($LINE_COVERED/$TOTAL_LINES)*100}")
            else
              LINE_PCT="N/A"
            fi
            
            if [ "$TOTAL_BRANCHES" -gt 0 ]; then
              BRANCH_PCT=$(awk "BEGIN {printf \"%.2f\", ($BRANCH_COVERED/$TOTAL_BRANCHES)*100}")
            else
              BRANCH_PCT="N/A"
            fi
            
            echo "| Metric | Coverage | Covered / Total |" >> "$GITHUB_STEP_SUMMARY"
            echo "|--------|:--------:|:---------------:|" >> "$GITHUB_STEP_SUMMARY"
            echo "| 📄 Lines | **${LINE_PCT}%** | \`${LINE_COVERED} / ${TOTAL_LINES}\` |" >> "$GITHUB_STEP_SUMMARY"
            echo "| 🌿 Branches | **${BRANCH_PCT}%** | \`${BRANCH_COVERED} / ${TOTAL_BRANCHES}\` |" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "❌ XML file not found: $JACOCO_XML" >> "$GITHUB_STEP_SUMMARY"
          fi

          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "📁 [Open run page](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> "$GITHUB_STEP_SUMMARY"

  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
